package encoding

import (
	"testing"

	. "github.com/seetohjinwei/ccfyi/redis/internal/pkg/assert"
)

func TestEncodeLength(t *testing.T) {
	Equal(t, V(EncodeLength(0)), V([]byte{0}))
	Equal(t, V(EncodeLength(63)), V([]byte{63}))
	Equal(t, V(EncodeLength(64)), V([]byte{0b01000000, 64}))
	Equal(t, V(EncodeLength(255)), V([]byte{0b01000000, 255}))
	Equal(t, V(EncodeLength(256)), V([]byte{0b01000001, 0}))
	Equal(t, V(EncodeLength(16383)), V([]byte{0b01111111, 255}))
	Equal(t, V(EncodeLength(16384)), V([]byte{0b10000000, 0, 0, 0b1000000, 0}))
	Equal(t, V(EncodeLength(53189571)), V([]byte{0b10000000, 0b11, 0b00101011, 0b10011011, 0b11000011}))
}

func TestDecodeLength(t *testing.T) {
	Equal(t, V(DecodeLength([]byte{0})), V(uint(0), []byte{}, nil))
	Equal(t, V(DecodeLength([]byte{63})), V(uint(63), []byte{}, nil))
	Equal(t, V(DecodeLength([]byte{0b01000000, 64})), V(uint(64), []byte{}, nil))
	Equal(t, V(DecodeLength([]byte{0b01000000, 255})), V(uint(255), []byte{}, nil))
	Equal(t, V(DecodeLength([]byte{0b01000001, 0})), V(uint(256), []byte{}, nil))
	Equal(t, V(DecodeLength([]byte{0b01111111, 255})), V(uint(16383), []byte{}, nil))
	Equal(t, V(DecodeLength([]byte{0b10000000, 0, 0, 0b1000000, 0})), V(uint(16384), []byte{}, nil))
	Equal(t, V(DecodeLength([]byte{0b10000000, 0b11, 0b00101011, 0b10011011, 0b11000011})), V(uint(53189571), []byte{}, nil))
}

func TestEncodeString(t *testing.T) {
	Equal(t, V(EncodeString("")), V([]byte{0}))
	Equal(t, V(EncodeString("abc")), V([]byte{3, 'a', 'b', 'c'}))

	// import random; import string; [''.join(random.choices(string.ascii_uppercase + string.digits, k=100)) for _ in range(50)]

	tests := []string{"", "abc", "5OCVJB6OHWNBMMJA9Z5ZV084J2GYYKC7ZRFU1I21Q0ROJLRMXIUQZBEZWJWGG8DG500O1IWY7URPDL20MJU98PO4XVDY3HJF67V7", "P0P618KP5Y4S2C7X41DJGNXAWMTPBG94I5H7SDPA7HENM05TYK05MTYDIW1CHGM33OP1LC178SK7KNHZE7N93EZQC9QQUFNV9TG6", "R41B42YW4Q7JBYD5HBRSZXP2M5HCGU541VYLXGTIWJDBSKNRXQM92JE1X5C5EWLAP6PUZOY8CXCEK7EDF8KBPASDSQDPISGUYMVF", "4RQZDJK0SOUPHM0ZSBOFOWP23XUK3JEDJY3N9BPK4EIXM7I1X4JVSMUP9USYNGBSP582HLHHSEBDO5ZQ4XP8MHRUOZU3BDQFCV6C", "NWJDJ0WAVKRCNM1QB302AS4H663QBLOUM5P5HAQFJ0CPZY6BQ13BXVJEPXHVK6S2LR1R5RK5OEBTUPAP450RVQ0TH6ZBP20PFGMW", "FG1H1FPVZRSGL0UQ10T6SOYINBJZUR4KPCG93OIY9XRS6F42KVZY14H36J3D92OJRHBJG9AQXKE2Y9QUOZKH7IG7E6P07V3RMQJF", "V8P16KOZ8A2WVBXCJK9UUS5APRQ5FCNXHJ8BCV8VNAAER0GSQ6NRSIZUW8I89UOOIEUVMJJ0X4FDYSLEIUE1OOUJPF1K3J3I1Q1W", "J0XDUPPKVY8OUH8TDGCUSTD8LV9OZR9AWAK4URSGBDBP4L10EW4W73WGA08UIKK564DWNZQ7UKX70Q2TFWHVCK61CUYSALMUF25Z", "68LWOJX8X1K7LDEBLD6QTFZF5WSVKBYEFMHY2M9B0DHIOIUYS7AK78EGXED2BK0GAZUGPTVCEDO8J7P8QKF4DH2QWJ8UFSL7XJZQ", "BD0C60OVSFJ7QO2GLCAU33R36EDGDEA04KJT53I726CBWOAI8W43FXUYMOD9DRK5CT6NT4060MZDY60MUBKRIT6V0935QEORN1CB", "8RY0W6UQWCBC81L5HZZ13PWFV9USWF9ZN6SCHJUALXQPMFLL201YKP9NG1QWP436AQGTWTLCOS9ZF29EM7FA6WMIVIT73D9VGXEY", "ERJ3V0CDILN21BUV7BXRA05Q0WPQJ6CS4JW515DINZORZOP5ZGVN4JDVE20JZ0MFOI65AD55VOSCIWGUFR7UH596OIUCX52PBLYL", "KZVGWMD1W6E6V8PWHVDFC7XHE2GPUDG3MVNDN5PN1RWYVZ4PCMTVNFSGJEZ4KIUBEPUEIEHDF9DEV9H3D05PDUSJIYJKYPZA6Z9E", "FKOOT6EK4UM5EZBGJBRAZHUA38AMFBU35FW1DJD8FKAHMABCNHF5XURN7AA37LD7HB7KRKVK3USBILHUVGFZ5DAL205B8HD9U23L", "69E0QIFK1MNDCV7GYQB98LQBJ08D6U51R0WM3CWYN665LYEPJDNOPY735R90YZEK12YOK6ZPKB40UQVN44DCV9LOXVG6YKCAPJGN", "FFM4GVN6SOLVKX0E05ZPVY6AV4QSTWOP0OZT1LJD6PLURZTOA1Q4T3CJGQMHK6UP4WKH4HMBPJWZ63PKATT2EXR6FD1L3SBQQL8G", "IW60KKMLKNO85A34TNV9BXIPK8XCY8D3A5Q77VV6ZA314Z902D613D10OQUEECR5MMZ3ALNE9ECTNH2K38EQPRE8S2K8HKGQBMAC", "5YN05E8PZ8Y8F619EAV1I044KVCZG0KJ8KYU2XQHE4OT9HQLG5KZNM7TGXKI2VPW4ADVFDZ77EBNDORIAR99G7UTQ5LO38Z74R2F", "5PUJM90BH6ZYTDKVS2MT94YHR0QN8FJ0O0IGQ3SP970M9SQDR60L46I35372KHRJX5RW49E2TL8TVWZF1N3GA5641QSQ3FW81KM5", "89K8BDVB0WQCMN9BPO1OJ8AI16C8J85CDIYA4DXKD3BRFNU521GEP984SMUZX1IJYJ5AKWPN9XI58EQ0SC8ID8M1FGQIL2M5GC9Z", "9RGV7Q0H8RRS5R9YC0IB4ICHSVDF5IXAZOU90B7XBYWZKILK5TI06NQ0QXTYUB72G846EE6LEVJC1QIN3LO8D2C8CXFOE4P7GKBV", "AMBZZ506VUTT1YNXOPWGKQWS2A1A1DF2E5E8DP36QNWCV90BNDQ2HFQX5ACP4NTXQB0UEAO7YPQOEYK7QC93MBQLZ3T5WWGX6AV2", "G3T1BS7VXE6J1R9XYJYS94GSVC20E3H9LTT6VK9D7QNBSKQN2VXY2X9WM2XD5WVX57315ELNLZ114SJXWKIRSGC75GTA5ZO9A4QA", "S7VCAL0Q3K6ED1WOCIWVTLGHED52OBPW5OHQBUHE3TLYL4XNOZOKG5OI12T450XBNHLCDMO99N8V3MHHV8DR3OHJ35L1E9NFZFGN", "SLTK8P6Z27DC32T2WUSOVTXB89D545D975W22IZX3T0ZLOKARPWMCXGJEBZ8X17USNXTMNQAA2O6CNTLTU13WPG72MLDY2M2XTDP", "VFAQAUQP4HGSVA1ZE2LOWS43D4X1KKMDN10SLXNPQT5J8YJY9M9U5J125L5JIREQ37Q091KWB4TA809CTLTUAGCZU7TWBRM037GD", "SE2Q1WWCM0UVGZ2SSFR9LG8RDTPQ81799E1JGVJANTDOLXUY007BJQNMHI2463U956UQGDTZKMAOJVLKTBHHLJXRVFFEGK3YR0WW", "4K8982M1W8LOR3WW4YQWES1633CYL0JF4ARNUJQP6OFS25HW45W9GP6L4P2CBXTHLYQZKCYPZW7FR9NPZ4BI9OOZWAT90EK0XRD1", "XUW5GEX9W7II0L4CB3L49E7GX6ZSN88DOQDK487995DF8QVYYVG2D7AREU3AU0WUWONYTHRIDVA5I3SNA08F4SFBHLKGAMWAYGRP", "IJR3I69ISEA8ZHZ9PMOM7K8O7NB4MUFDX1FC297KP1G7ZIG5BXTXXZH2NB7CAA758G8N9JJAEH0NZBMNFRJPQXZ6OND59J21AVHW", "AUS9J7J1RG0GS94PLQP5PRGTUBT69MVP5BGDXAVSULPKY0KEUXDB5O7273DNRIONKRI87Y3Q8D2CQ5CJ68Q50R77VQZ90AQEHFTU", "XS4E0IW8FZ8DSU7YQ6VII9MUX6GANL2C6PT3EJDGV5FVHXU9Y3A3HQYI8NO8JUJLE3IZTRGSBABSUO0J20G95LSIBAWEDDF7KTHR", "OPYK34OJMKXK8R21RN2VAALI0Y3X0XVKGHP7DMFMO6LATO9I6ZIPSI67J9JKCLFXZ7SVXL4RNACCR2DUOZD77AQBYDCXGDKKKJH6", "4EG0HQQFFZJ5CGAE45N7LI7I32X75D2TP5CR6S79VDYHGTQC9IK80CF4QELIDK9DLD6TAS56KSUAPBKS7WPTZ3KNSBRAGDK0R4PM", "AEMUMIPZQCJURQ0HZ2OX56MI973JEDW9A8P451HVGFDFFYI5LS6NT6O87K6RBB6HR5B5NMG4JM0SW7F5ZUAHKEYXR80L5BI7JGLI", "3PZ9UQC9CL5ZJWRADT56GDSWF0EYI4QPV8GOZLLLQQ3XDRY0E6LJYKSKHOUBZRMPYFBR1THSVKEL190FD2JFWKRPAIYR1A2T5CU5", "NNMASS61VUCX88Q905C2Q3FJKO3R7CNVDC1118TEL56AJWBP358OCFOXM6HLF6IQ61DMDIQAFFEXREA0CHXWMT0NZVSKTSIVJHQF", "YKLHB8U2NNQ7M452AP0YQVIK06897FCNUYRRT88RG47BT1YIXO1MHFPDCIL0IJRLKZDTMAH6OOSCXXS7DS0VNR0EXGKOU3VUZQJV", "OT87NC906P1XSHQY1BD15ED36ATKX350ZB1JVV3I9AL1RKZCYEREHHT43A92UN1W7ZADYT3YY0HD7O7WWEOZ9272BZHGRY9RZM2N", "WF7ZWC1RJYV0QV04N7549RSZTY8IDMPVPL79HLTP2VN8M5T6KCT13QJYJHZQTKWMB7OAYIC8MF01122LE12E6X60X6202RNAMBDS", "ADZ7F2A5B0RXYYQXNT4BVMYBTD1G46NH17L61VIDHEQNZH2ONACKGLSIOMDNZU5YKNG8T7UAUGZLPD0H98EQ9F9DFRFU3WIPOGLQ", "RDMOB8Z8U4ZVN3Z4PD6IKHHMIZWJ6EMQBBPM6CB8TW5PT0JBVOWT9HOA8ZDGW68TEG7VSSNKK7ZCHR2T3YIJZ0FCXE0758G0NNR0", "OX636P1K37XK0IKDWPHP1TO52EYQF3WDWGMRUC75112U38DCZD2VYCNWPCJ4K42DVM0GUJZVL3H8INRXECD3XJSGIGXRS8QS2GYO", "OJ6G83TWW8V8VCPMLPHV2NZ9DQZ6VOSSIB3SZWKY4A96FG797MOD5OZ0YC8WQDJLSHXB32RNVLHK9ANRAPP94WIGI8PV775IOF7Z", "QC83U2BROKTL9SQRC3YD364G8D1OHPF7JT2CF31M6CGMZWYUMIIH8M8LHM3A408KHTAC121THAOGVLYP8BKUZ1RZZXTEUEGS716F", "9AKIGZL6QGE69VLH40H686ISLI7P7DRNB0IAXM5QTLH9WZ22WY5INW99Q2LGMOQY9Y7B793POUUCZQ1C1U6S5UQ482ELUMHHV5PV", "WGP1ABMC38OVEVTWXD9SUL1VXN444MVFL5UHXPWDIEO3PGRU39A0UQPG59DF1SHDHF3R6DVKYBUZCCHWQ624BOK9TOVU5NAMUN03", "72LFRZVFKJZ7XRGPEA8NM1CQKCMA5PW36JL2EDT4KETNT48D25LMM23XRQOKFJ9M9SZMGCYDBD6R919M59I9UJBR68GCB2D529MN", "C8FDI1886HANSZRKMU58HFT8Q2JY7VK42C4T84M2IRC6J6OHPYNFEEL71ICCBC11W5DMALM3UEGLE01VO63B8WJOA3NRYI9HYCPP", "47GHGKTVFW0A2FPX6X1ENNFVVJMCV4GQGNFOP95MM5S4EYNPLUYBWM6JU73P4T6SBTUXKOIRDGHURXVBKQC3GBTJQQIIJP47SX4X"}

	for _, s := range tests {
		v, _, err := DecodeString(EncodeString(s))
		NoError(t, err)
		EqualO(t, v, s)
	}
}

func TestEncodeInteger(t *testing.T) {
	// used python3 to generate these integers:
	// run it for the different ranges
	// import random; [random.randint(-9223372036854775808, 9223372036854775807) for _ in range(50)]
	tests := []int64{0, 23, 57, 47, 79, 6, 70, 93, 1, 117, 36, 114, 33, 66, 65, 38, 60, 125, 10, 95, 103, 118, 74, 51, 43, 58, 64, 37, 76, 66, 26, 111, 54, 49, 90, 72, 31, 97, 101, 14, 20, 99, 34, 99, 91, 109, 100, 15, 98, 97, 101, 6435, 31815, 8935, 3408, 12589, 5484, 32231, 2932, 6024, 3563, 29280, 10821, 19738, 30941, 11395, 20246, 12611, 30377, 32444, 5272, 28419, 13753, 14426, 22621, 2517, 11079, 6478, 4991, 27151, 19594, 12413, 32565, 24695, 30113, 9543, 26491, 23643, 5670, 22040, 2110, 28203, 7528, 15288, 29751, 9361, 2459, 32712, 13506, 13217, 11061, 1901335108, 679445619, 189001749, 2032064119, 167426343, 152504685, 1893096773, 1995592172, 2106281733, 1979436769, 2060436925, 1063451059, 656651919, 1439367481, 983921803, 1565174363, 889223014, 208071444, 1221758603, 566266438, 930006771, 422004793, 749002886, 977819818, 674393270, 836071414, 1280430026, 1554281564, 1204101811, 1311066322, 68279181, 1984143494, 207413835, 1176693100, 215224, 1321463035, 853683249, 1080371868, 2140007537, 211243082, 431544567, 1086720484, 1896756605, 976027413, 1181356843, 969768573, 1271202451, 2107462749, 1160882358, 2020041894, -1, -29280, -207413835, -4400463699787775932, -2128555049838580125, -8650790751252579852, -5466502024118287218, -2809406809902063442, -7630020521390550257, 4652502599400708024, 5704227622520636123, 6247124992854466297, -4798776951179090997, 6534040971451006592, -2584998984662040587, 2853791479541397168, -7675475957745074721, 4139217978317381391, 2286595475663860638, 4230083323836738755, 6648031937315231869, 754639252141871843, -6454377042357046094, 954702645950739216, 7132460057305661457, 5228771722615105780, 2815946432016650685, -1586750384447799895, 2689952156204414988, -6502649918421747344, -1131277581126584898, 295498990847639758, -2355645520376087843, -5575837163053257633, 4111782310013913699, 6313019090773702559, -1959938686329464985, 1807749398436943047, 176946607990171351, 6553190817318462481, -8712175868255852541, 192539156397665321, 8389246647775360858, 8592961845889707826, -499445903818218654, 4954032610071760804, -1556870181685199798, 1770155414178692115, -8632680726344627149, 6258454532595667148, 1334092219407095288, -4604531789801306945, 1803017491536231015}

	for _, n := range tests {
		v, _, err := DecodeInteger(EncodeInteger(n))
		NoError(t, err)
		EqualO(t, v, n)
	}
}

func TestEncodeList(t *testing.T) {
	tests := [][]string{
		[]string{},
		[]string{"", ""},
		[]string{"123", "456"},
		[]string{"redislite", "etilsider"},
	}

	for _, strs := range tests {
		a, _, err := DecodeList(EncodeList(strs))
		NoError(t, err)
		EqualO(t, a, strs)
	}
}
